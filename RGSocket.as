/* *	RGSocket.as * *  Developer: Micah Eckhardt *  Copyright (c) 2007 Machine Perception Laboratory, *  University of California San Diego, Micah Eckhardt *  *  Please read the disclaimer and notes about redistribution  *  at the end of this file. */class classes.RGSocket extends XMLSocket{	private var registered:Boolean; 	private var rubiosNodeName:String; 	private var hostName:String; 	private var registrationString:String; 	private var portNumber:Number; 	private var socket:XMLSocket	private var onCloseGoToFrame:String; 	private var connectionReady:Boolean; 	private var currentPong:Number; 	private var lastPong:Number; 	private var intervalId:Number;	private var rubiosCommand:String; 		public function RGSocket(){		this.registered = false;		this.connectionReady = false; 		this.onCloseGoToFrame = null; 		this.rubiosNodeName = null; 		this.hostName = null; 		this.registrationString = null; 		this.rubiosCommand = null; 		this.portNumber = 0; 		this.currentPong = 0;		this.lastPong = 0; 		this.socket = new XMLSocket(); 		this.intervalId = setInterval(this, "ping", 10000, "RUBIOS: PING" );	}		public function connectRUBIOSSocket(){		//trace("hostName and port" + hostName + " " + portNumber); 		connect(hostName, portNumber); 	}	//override onData	public function onData( dat ){			trace( "received: " + dat );		if(dat.lastIndexOf("Controller:") >-1){				// Given rubios command 				var start:Number = dat.lastIndexOf("Controller:"); 				var end:Number = dat.length - 1; 				this.rubiosCommand = dat.substring(start, end)		}		if(dat.lastIndexOf("RUBIOS Registration Successful") > -1){ 			this.registered = true;			//	    trace("Registered :)");		}		if(dat.lastIndexOf("RUBIOS Registration Failed" )> -1) {			fscommand("quit","true");			}		if((dat.lastIndexOf( "RUBIOS: REMOVE")>-1 || dat.lastIndexOf( "RUBIOS: KILL")> -1 ) && 	dat.lastIndexOf(rubiosNodeName)>-1){			trace("line 54 RGSocket"); 			send(rubiosNodeName+" Received Kill Message. Disconnecting"+" \r"); 			fscommand("quit","true"); 		}		else if(dat.lastIndexOf( "RUBIOS: STATE")>-1 && dat.lastIndexOf("RUBIOS: STATE:") <0){ 			send("RUBIOS: STATE: "+rubiosNodeName+ ": Active: true"+" \r"); 		}		else if(dat.lastIndexOf("RUBIOS: PONG") > -1){			trace("got a pong"); 			this.lastPong = this.currentPong;			this.currentPong = getTimer();				if(currentPong - lastPong >180000){				send(rubiosNodeName+" have not Received PONG for more than 3 minute. Disconnecting."+" \r");		   	fscommand("quit","true");			}		}	}	public function isRubiosCommand(str:String):Boolean	{		var rtnVal:Boolean = true; 		if(this.rubiosCommand.lastIndexOf(str) > -1)			rtnVal = true; 		else			rtnVal = false; 		return rtnVal; 	}	public function setRubiosCommand(str:String)	{		this.rubiosCommand = str;	}	//override supper	public function onClose(){ 		// We've been disconnected from RUBIOS, we need to close the shop		trace("mySocket.onClose");		this.registered = false;		gotoAndPlay(onCloseGoToFrame);   //	fscommand("quit", "true");	}	public function onConnect(success:Boolean)	{			trace("attempting connection to server"); 		if (success){			trace("connected :)");			trace(registrationString); 			send(registrationString + "\r");			this.connectionReady = true;		}else{				trace("no connection :(");				this.registered = false;				gotoAndPlay(onCloseGoToFrame); 		}	}	function sendData(msg:String){  		//trace("sendData: " + msg); 		if(connectionReady){   		send(msg + "\r");  				}	}	private function ping(msg:String):Void{			send(msg + "\r"); 		if(this.currentPong - this.lastPong >180000){			send(rubiosNodeName +" have not Received PONG for more than 3 minute. Disconnecting."+"\r");     	fscommand("quit","true");    }	}	//set methods	public function setHostName(host:String){ this.hostName = host; } 	public function setPortNumber(aPort:Number){ this.portNumber = aPort; }	public function setRegistrationString(regStr:String){ this.registrationString = regStr; }	public function setRubiosNodeName(name:String){ this.rubiosNodeName = name; }	public function setCloseFrameName(frameName:String){ this.onCloseGoToFrame = frameName }	//access methods	public function getRegistered():Boolean{ return this.registered; }	public function getrubiosNodeName():String{ return this.rubiosNodeName; }	public function getHostName():String{ return this.hostName; }	public function getRegistrationString():String{ return this.registrationString; }	public function getPortNumber():Number{ return this.portNumber; }	public function getConnectionReady():Boolean{ return this.connectionReady; }	public function getCloseFrameName():String{ return this.onCloseGoToFrame; }}/* *  * Redistribution and use in source and binary forms, with or without modification,  * are permitted provided that the following conditions are met: *  *    1. Redistributions of source code must retain the above copyright notice, this  *     list of conditions and the following disclaimer. *    2. Redistributions in binary form must reproduce the above copyright notice, this *       list of conditions and the following disclaimer in the documentation and/or  *     other materials provided with the distribution. *    3. The name of the author may not be used to endorse or promote products derived *     from this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FO * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIR * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CON * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. *  */